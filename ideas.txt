- Anomaly detection on top of the data and model

- Maybe use ensemble models if the underlying models are uncorrelated

- Change so that indicators don't show the close column

- Look only at predictions where the selected class has more than 70%-80% probability

- Do we need to increase or reduce bias. I feel that right now my random forests are underperforming. Also look at how it fits the training data to see if there is a lot of variance or not

- Maybe test different currencies programmatically

- Find ways to reduce bias

- Method chaining for indicators

        - Would have to make px an return attributes to methods. create an indicator class that takes a batch, and all indicators as subclasses can be appended.
        batch > indicator > ATR > MA = batch.log_ret().ATR().MA()

        - Or maybe not with a batch class but a pd.Dataframe class

Random trees:

remember to shift the results one day so that they can predict

Use returns and then also price, try to use different indicators

Use over/under or buy/sell rules for the indicators including MA(50)/MA(200) or RSI. Specially for random forests

Remember that they predict probability of the class so you can see how likely it is to be that class and then you can adjust probability

Remember to repeat and test with the same currency/time, different currencies, and different times  

Limit splits in some way

You always need to lag the return or result

Lagged vs current prices and returns


Accuracy Metrics:
Precision - Accuracy
MAE 
RMSE
Correct Up/Down and correct total 